---
name: GitHub Action based CI Pipeline for SpringBoot API
on:
  pull_request:
    branches: [ main,dev ]
  push:
    branches: [ main ]
jobs:

  compile:
    #runs-on: self-hosted
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [ 11 ]
    name: Java ${{ matrix.java }} compile
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-package: jdk
          java-version: ${{ matrix.java }}
      - name: Compile Test and Code Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://ch-sonarqube.southeastasia.cloudapp.azure.com:9000
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.verbose=true
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://ch-sonarqube.southeastasia.cloudapp.azure.com:9000

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=priyanath84
            -Dsonar.projectKey=springboot-api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

  build:
    runs-on: ubuntu-20.04
    needs: compile
    name: Build the Maven Project and Docker Image then Push to ECR
    env:
      GROUP: dhanuka84
      REPO: springboot-api
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          java-package: jdk
      - name: Build project without testing
        working-directory: ./
        run: mvn -B verify -DskipTests
      - name: Upload Maven build artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact.jar
          path: ./target/springboot-api-1.0-SNAPSHOT.jar

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment latest tag from git
        id: increment-git-tag
        run: |
          bash ./build/git_update.sh -v minor main

      - name: Build and Tag the Image to Amazon ECR
        id: build-image
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_REPOSITORY: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .

      - name: Scan images
        id: scan-image
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_REPOSITORY: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GROUP }}/${{ env.REPO }}:${{ steps.increment-git-tag.outputs.git-tag }}
          scan-type: 'fs'
          severity: CRITICAL
          #format: 'table'
          #exit-code: 1
          #template: '@/contrib/sarif.tpl'
          #output: 'trivy-results.sarif'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: trivy-image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push the Image to ECR
        id: push-image
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_REPOSITORY: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG

  list_artifacts:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: call webhook to get artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "::add-mask::$GITHUB_TOKEN"
        curl --verbose --fail --show-error --location --request GET "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/artifacts" --header "Authorization: token $GITHUB_TOKEN" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.v3+json'

    
  cleanup_job:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: call webhook to delete artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "::add-mask::$GITHUB_TOKEN"
        curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $GITHUB_TOKEN" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"
